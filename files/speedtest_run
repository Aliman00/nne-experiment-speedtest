#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# =================================================================
#          #     #                 #     #
#          ##    #   ####   #####  ##    #  ######   #####
#          # #   #  #    #  #    # # #   #  #          #
#          #  #  #  #    #  #    # #  #  #  #####      #
#          #   # #  #    #  #####  #   # #  #          #
#          #    ##  #    #  #   #  #    ##  #          #
#          #     #   ####   #    # #     #  ######     #
#
#       ---   The NorNet Testbed for Multi-Homed Systems  ---
#                       https://www.nntb.no
# =================================================================
#
# Container-based Speed Test for NorNet Edge
#
# Copyright (C) 2018-2019 by Thomas Dreibholz
# Copyright (C) 2012-2017 by Džiugas Baltrūnas
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

import subprocess
import os
import json
import sys
import netifaces
import time
import argparse
import logging
import logging.config
import tempfile
import signal
import platform
from datetime import datetime
from collections import OrderedDict

class At(object):
  def __init__(self, year=None, month=None, day=None, weekday=None,
               hour=None, minute=None, second=None):
      loc = locals()
      loc.pop("self")
      self.at = dict((k, v) for k, v in loc.iteritems() if v != None)

  def __contains__(self, now):
    for k in self.at.keys():
      try:
        if not getattr(now, k) in self.at[k]: return False
      except TypeError:
        if self.at[k] != getattr(now, k): return False
    return True

running = True

NET_MAP = { 1: '24201', 2: '24202', 4: '24205', 5: '24206', 15: '24205', 18: '24214', 19: '24219' }

op = argparse.ArgumentParser(description='speedtest.net and web load speed')
op.add_argument('--mid', type=int, help="Measurement instance id", required=True)
op.add_argument('--netid', type=int, help='Network ID', required=True)
op.add_argument('--netif', help='Network interface name', required=True)
op.add_argument('--coords', help='GPS coordinates: LAT,LON', default='59.913869,10.752245') # Oslo sentrum
op.add_argument('--url1', help='URL #1 to fetch', default='https://m.nrk.no/')
op.add_argument('--url2', help='URL #2 to fetch', default='https://www.vg.no/')
op.add_argument('--hour', type=int, nargs='+', required=True, default=[1, 13, 18])
op.add_argument('--minute', type=int, nargs='+', required=True, default=[0, ])

opts = op.parse_args()
mccmnc = NET_MAP[opts.netid]

# FIXME: check if arguments are valid

MBBM_LOGGING_CONF = {
    'version': 1,
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'standard',
            'filename': '/nne/log/speedtest_%d.log' % (opts.mid),
            'when': 'D'
        },
    },
    'formatters': {
        'standard': {
            'format': '%(asctime)s %(levelname)s [PID=%(process)d] %(message)s'
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['default'],
    }
}

logging.config.dictConfig(MBBM_LOGGING_CONF)
mlogger = logging.getLogger('mbbm')
cwd = os.path.dirname(os.path.realpath(sys.argv[0]))

cmds = [
  ( 'metadatab', [ 'wrap-nne-query-metadata', mccmnc ] ),
#  ( 'speedtest', [ 'speedtest_cli', '--simple', '--json', '--coords', opts.coords ] ),
  ( 'webload11', [ 'phantomjs', '--ignore-ssl-errors=true', '%s/loadspeed.js' % (cwd), opts.url1 ] ),
  ( 'webload12', [ 'phantomjs', '--ignore-ssl-errors=true', '%s/loadspeed.js' % (cwd), opts.url1 ] ),
  ( 'webload13', [ 'phantomjs', '--ignore-ssl-errors=true', '%s/loadspeed.js' % (cwd), opts.url1 ] ),
  ( 'webload21', [ 'phantomjs', '--ignore-ssl-errors=true', '%s/loadspeed.js' % (cwd), opts.url2 ] ),
  ( 'webload22', [ 'phantomjs', '--ignore-ssl-errors=true', '%s/loadspeed.js' % (cwd), opts.url2 ] ),
  ( 'webload23', [ 'phantomjs', '--ignore-ssl-errors=true', '%s/loadspeed.js' % (cwd), opts.url2 ] ),
#  ( 'metadatai', [ 'wrap-nne-query-metadata', mccmnc ] ),
#  ( 'dash',      [ 'dash', ] ),
  ( 'metadataa', [ 'wrap-nne-query-metadata', mccmnc ] ),
]

def handler(signum, frame):
    global running
    running = False

signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGTERM, handler)

def log(s):
  global opts

  filename = "/nne/data/speedtest_%d.sdat.%s" % (
    opts.mid, datetime.strftime(datetime.utcnow(), '%Y-%m-%d_%H-%M-%S')
  )

  with tempfile.NamedTemporaryFile() as f:
    time.sleep(10)
    f.write(s)
    os.link(f.name, filename)

def run():
  global cwd
  env = dict(os.environ)
  res = OrderedDict()
  try:
    sip = netifaces.ifaddresses(opts.netif)[netifaces.AF_INET][0]['addr']
  except:
    return

  env['LD_PRELOAD'] = "%s/bind.so.%s" % ( cwd, platform.machine() )
  env['BIND_ADDR'] = sip
  env['NAMESERVER1'] = "8.8.8.8"
  env['PATH'] = "%s:%s" % ( env['PATH'], cwd )

  now = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')
  seqnum = 0

  for cmd in cmds:
    try:
      cmd_name, cmd_args = cmd
      proc = subprocess.Popen(cmd_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
      stdout, stderr = proc.communicate()

      if proc.returncode:
        res[cmd_name] = {
          'status': 'error',
          'exitCode': proc.returncode,
          'exitMessage': stderr,
        }
        continue

      res[cmd_name] = json.loads(stdout)

    except Exception, e:
      res[cmd_name] = {
        'status': 'exception',
        'exitMessage': str(e),
      }

  log('%s\t%d\t%d\t%s' % (now, opts.mid, seqnum, json.dumps(res)))
  # json.dumps(res, indent=4, separators=(',', ': '))

# Make the intervals at least 2 minutes apart
for i in range(len(opts.minute)): opts.minute[i] *= 2

event = At(hour=opts.hour, minute=opts.minute)

while running:
  if datetime.utcnow() in event:
    run()

  time.sleep(60)

sys.exit()
